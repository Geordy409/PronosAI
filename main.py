import streamlit as st
from langchain_openai import ChatOpenAI
from langchain.tools import Tool
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain_community.utilities import SerpAPIWrapper
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
from langchain import hub
import subprocess
from urllib.parse import urlparse
from pydantic import HttpUrl
from langchain_core.tools import StructuredTool
from dotenv import load_dotenv
import os
import requests
import json
from typing import Optional

# Configuration de la page Streamlit
st.set_page_config(
    page_title="PronosAI",
    page_icon="üòé",
    layout="wide"
)

# Chargement des variables d'environnement
load_dotenv()

def ping(url: HttpUrl, return_error: bool = False) -> str:
    """Effectue un ping vers une URL pour tester la connectivit√© r√©seau."""
    try:
        hostname = urlparse(str(url)).netloc
        if not hostname:
            return f"Erreur: URL invalide '{url}'. Veuillez inclure https:// ou http://"
        completed_process = subprocess.run(
            ["ping", "-c", "1", hostname],
            capture_output=True,
            text=True,
            timeout=10
        )
        output = completed_process.stdout
        if return_error and completed_process.returncode != 0:
            return completed_process.stderr
        if completed_process.returncode == 0:
            return f"‚úÖ Ping r√©ussi pour {hostname}:\n{output}"
        else:
            return f"‚ùå Ping √©chou√© pour {hostname}:\n{completed_process.stderr}"
    except Exception as e:
        return f"‚ùå Erreur lors du ping: {str(e)}"

def test_odds_api_connection(api_key: str) -> str:
    """Teste la connexion √† l'API The Odds API avec la cl√© fournie."""
    if not api_key:
        return "‚ùå Pas de cl√© API fournie"
    try:
        url = "https://api.the-odds-api.com/v4/sports"
        params = {'apiKey': api_key}
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return f"‚úÖ API connect√©e ! {len(data)} sports disponibles. Quota restant: {response.headers.get('x-requests-remaining', 'N/A')}"
        elif response.status_code == 401:
            return "‚ùå Cl√© API invalide (401 Unauthorized)"
        elif response.status_code == 429:
            return "‚ùå Quota API d√©pass√© (429 Too Many Requests)"
        else:
            return f"‚ùå Erreur API: {response.status_code} - {response.text}"
    except Exception as e:
        return f"‚ùå Erreur de connexion: {str(e)}"

def get_sports_odds(
    sport_key: str,
    regions: str = "eu",
    markets: str = "h2h",
    api_key: Optional[str] = None
) -> str:
    """R√©cup√®re les cotes sportives pour un sport sp√©cifique depuis The Odds API."""
    if not api_key:
        return "‚ùå Cl√© API Odds manquante. Ajoutez ODDS_API_KEY √† votre fichier .env"
    try:
        url = f"https://api.the-odds-api.com/v4/sports/{sport_key}/odds"
        params = {
            'apiKey': api_key,
            'regions': regions,
            'markets': markets,
            'oddsFormat': 'decimal',
            'dateFormat': 'iso'
        }
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if not data:
                return f"‚ùå Aucune cote trouv√©e pour le sport: {sport_key}"
            result = f"üèÜ **Cotes pour {sport_key.upper()}**\n\n"
            for match in data[:5]:
                home_team = match['home_team']
                away_team = match['away_team']
                commence_time = match['commence_time']
                result += f"**{home_team} vs {away_team}**\n"
                result += f"üìÖ Date: {commence_time}\n"
                if match['bookmakers']:
                    bookmaker = match['bookmakers'][0]
                    if bookmaker['markets']:
                        outcomes = bookmaker['markets'][0]['outcomes']
                        result += f"üí∞ Cotes ({bookmaker['title']}):\n"
                        for outcome in outcomes:
                            result += f"  - {outcome['name']}: {outcome['price']}\n"
                result += "\n---\n\n"
            return result
        else:
            return f"‚ùå Erreur API Odds (Code {response.status_code}): {response.text}"
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des cotes: {str(e)}"

def get_available_sports(api_key: str = None) -> str:
    """R√©cup√®re la liste de tous les sports disponibles depuis The Odds API."""
    if not api_key:
        return "‚ùå Cl√© API Odds manquante"
    try:
        url = "https://api.the-odds-api.com/v4/sports"
        params = {'apiKey': api_key}
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            result = "üèÜ **Sports disponibles:**\n\n"
            soccer_sports = [s for s in data if 'soccer' in s['key']]
            other_sports = [s for s in data if 'soccer' not in s['key']]
            if soccer_sports:
                result += "‚öΩ **Football/Soccer:**\n"
                for sport in soccer_sports[:10]:
                    result += f"- {sport['title']} (`{sport['key']}`)\n"
                result += "\n"
            if other_sports:
                result += "üèà **Autres sports:**\n"
                for sport in other_sports[:10]:
                    result += f"- {sport['title']} (`{sport['key']}`)\n"
            result += f"\nüìä Total: {len(data)} sports disponibles"
            return result
        else:
            return f"‚ùå Erreur API: {response.text}"
    except Exception as e:
        return f"‚ùå Erreur: {str(e)}"

def initialize_llm_and_tools():
    """Initialise le mod√®le LLM et tous les outils disponibles pour l'agent."""
    openai_key = os.getenv("OPENAI_API_KEY")
    serp_key = os.getenv("SERPAPI_KEY")
    spot_key = os.getenv("SPORTMONKS_API_KEY")
    
    if not openai_key:
        st.error("‚ùå OPENAI_API_KEY manquante dans le fichier .env")
        st.stop()
    
    llm = ChatOpenAI(
        model="gpt-4o",
        temperature=0.1,
        api_key=openai_key
    )
    
    ping_tool = StructuredTool.from_function(ping)
    search = SerpAPIWrapper(serpapi_api_key=serp_key) if serp_key else None

    def odds_wrapper(sport_key: str) -> str:
        """R√©cup√®re les cotes sportives pour un sport donn√©."""
        return get_sports_odds(sport_key, api_key=spot_key)

    def sports_list_wrapper(query: str = "") -> str:
        """Liste tous les sports disponibles avec leurs cl√©s."""
        return get_available_sports(api_key=spot_key)

    def test_connection_wrapper(query: str = "") -> str:
        """Teste la connexion √† l'API des cotes sportives."""
        return test_odds_api_connection(spot_key)

    tools = []
    if search:
        tools.append(Tool(
            name="search",
            func=search.run,
            description="Utile pour rechercher des informations actuelles sur internet"
        ))
    if spot_key:
        tools.append(Tool(
            name="test_odds_connection",
            func=test_connection_wrapper,
            description="Teste la connexion √† l'API des cotes sportives"
        ))
        tools.append(Tool(
            name="get_sports_odds",
            func=odds_wrapper,
            description="R√©cup√®re les cotes sportives pour un sport donn√©. Utilisez les cl√©s comme 'soccer_epl', etc."
        ))
        tools.append(Tool(
            name="list_available_sports",
            func=sports_list_wrapper,
            description="Liste tous les sports disponibles avec leurs cl√©s"
        ))
    
    tools.append(ping_tool)
    return llm, tools, search is not None, spot_key is not None

# Interface Streamlit principale
def main():
    """Fonction principale qui lance l'interface Streamlit de PronosAI."""
    st.title("ü§óTippS")
    st.markdown("---")
    
    # Sidebar pour la configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # V√©rification des cl√©s API
        openai_key = os.getenv("OPENAI_API_KEY")
        serp_key = os.getenv("SERPAPI_KEY")
        odds_key = os.getenv("ODDS_API_KEY")
        
        st.subheader("üîë Statut des APIs")
        
        # Statut OpenAI
        if openai_key:
            st.success("‚úÖ OpenAI API configur√©e")
        else:
            st.error("‚ùå OpenAI API manquante")
            
        # Statut SerpAPI
        if serp_key:
            st.success("‚úÖ SerpAPI configur√©e")
        else:
            st.warning("‚ö†Ô∏è SerpAPI non configur√©e (recherche web d√©sactiv√©e)")
            
        # Statut Odds API
        if odds_key:
            st.success("‚úÖ Odds API configur√©e")
            if st.button("üîç Tester la connexion Odds API"):
                with st.spinner("Test en cours..."):
                    result = test_odds_api_connection(odds_key)
                    if "‚úÖ" in result:
                        st.success(result)
                    else:
                        st.error(result)
        else:
            st.error("‚ùå Odds API manquante")
            
        st.markdown("---")
        
        # Options d'affichage
        st.subheader("üìä Options")
        show_available_sports = st.checkbox("Afficher les sports disponibles", value=False)
        
        if show_available_sports and odds_key:
            with st.expander("üèÜ Sports disponibles"):
                sports_info = get_available_sports(odds_key)
                st.markdown(sports_info)

    # Interface principale
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üí¨ Chat avec PronosAI")
        
        # Initialisation de l'historique de conversation
        if 'messages' not in st.session_state:
            st.session_state.messages = []
            
        # Initialisation de l'agent
        if 'agent_executor' not in st.session_state:
            try:
                llm, tools, has_search, has_odds = initialize_llm_and_tools()
                
                # Cr√©ation du prompt personnalis√©
                prompt_text = """Tu es PronosAI, un assistant expert en pronostics sportifs.

Tu peux utiliser les outils suivants :
- search : pour rechercher des informations actuelles sur internet
- get_sports_odds : pour r√©cup√©rer les cotes sportives
- list_available_sports : pour lister les sports disponibles
- test_odds_connection : pour tester la connexion API
- ping : pour tester la connectivit√©

Contexte : Tu aides les utilisateurs √† analyser les matchs sportifs et √† fournir des pronostics √©clair√©s.

Consignes :
1. Utilise les cotes en temps r√©el quand disponibles
2. Recherche des informations r√©centes sur les √©quipes/joueurs
3. Analyse les statistiques et les tendances
4. Fournis des pronostics argument√©s mais rappelle toujours les risques
5. Sois pr√©cis et informatif

Messages pr√©c√©dents:
{chat_history}

Question actuelle: {input}

R√©flexion: {agent_scratchpad}"""

                # Utilisation du prompt par d√©faut de LangChain pour les agents OpenAI
                try:
                    # Essayer d'utiliser le prompt hub
                    prompt = hub.pull("hwchase17/openai-functions-agent")
                except:
                    # Si le hub ne fonctionne pas, utiliser un prompt simple
                    prompt = None

                # Cr√©ation de l'agent
                agent = create_openai_functions_agent(llm, tools, prompt)
                st.session_state.agent_executor = AgentExecutor(
                    agent=agent, 
                    tools=tools, 
                    verbose=True,
                    max_iterations=3,
                    handle_parsing_errors=True
                )
                
                # Message de bienvenue
                welcome_msg = """üéØ **Bienvenue sur PronosAI !**

Je suis votre assistant IA sp√©cialis√© dans les pronostics sportifs. Je peux vous aider √† :

‚Ä¢ üìä Analyser les cotes sportives en temps r√©el
‚Ä¢ üîç Rechercher des informations sur les √©quipes et joueurs
‚Ä¢ üìà Fournir des analyses statistiques
‚Ä¢ üéØ Proposer des pronostics argument√©s

**Exemples de questions :**
- "Quelles sont les cotes pour la Premier League ce week-end ?"
- "Analyse le match Barcelona vs Real Madrid"
- "Quels sont les sports disponibles ?"

‚ö†Ô∏è **Rappel important :** Les paris sportifs comportent des risques. Jouez de mani√®re responsable !"""

                st.session_state.messages.append({"role": "assistant", "content": welcome_msg})
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de l'initialisation : {str(e)}")
                st.stop()
        
        # Affichage de l'historique des messages
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input utilisateur
        if prompt := st.chat_input("Posez votre question sur les pronostics sportifs..."):
            # Affichage du message utilisateur
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # G√©n√©ration de la r√©ponse
            with st.chat_message("assistant"):
                with st.spinner("ü§î Analyse en cours..."):
                    try:
                        # Construction de l'historique pour le contexte
                        chat_history = ""
                        for msg in st.session_state.messages[-10:]:  # Derniers 10 messages
                            role = "Humain" if msg["role"] == "user" else "Assistant"
                            chat_history += f"{role}: {msg['content']}\n"
                        
                        # Ex√©cution de l'agent avec le contexte syst√®me
                        system_message = """Tu es PronosAI, un assistant expert en pronostics sportifs. 

Utilise les outils disponibles pour :
- R√©cup√©rer les cotes sportives en temps r√©el
- Rechercher des informations actuelles 
- Analyser les matchs et fournir des pronostics argument√©s

Rappelle toujours les risques li√©s aux paris sportifs."""

                        # Pr√©paration du contexte complet
                        full_prompt = f"{system_message}\n\nHistorique r√©cent:\n{chat_history}\n\nQuestion: {prompt}"
                        
                        response = st.session_state.agent_executor.invoke({
                            "input": full_prompt
                        })
                        
                        assistant_response = response["output"]
                        st.markdown(assistant_response)
                        st.session_state.messages.append({"role": "assistant", "content": assistant_response})
                        
                    except Exception as e:
                        error_msg = f"‚ùå Erreur lors du traitement : {str(e)}"
                        st.error(error_msg)
                        st.session_state.messages.append({"role": "assistant", "content": error_msg})
    
    with col2:
        st.header("üìã Raccourcis")
        
        # Boutons de raccourcis
        if st.button("üèÜ Sports disponibles"):
            st.session_state.messages.append({"role": "user", "content": "Quels sont les sports disponibles ?"})
            st.rerun()
            
        if st.button("‚öΩ Cotes Premier League"):
            st.session_state.messages.append({"role": "user", "content": "Montre-moi les cotes de la Premier League"})
            st.rerun()
            
        if st.button("üèà Cotes NFL"):
            st.session_state.messages.append({"role": "user", "content": "Quelles sont les cotes NFL actuelles ?"})
            st.rerun()
            
        if st.button("üîÑ Nouvelle conversation"):
            st.session_state.messages = []
            st.rerun()
            
        st.markdown("---")
        
        # Informations utiles
        st.subheader("‚ÑπÔ∏è Informations")
        st.info("""
        **Codes sports populaires :**
        ‚Ä¢ `soccer_epl` - Premier League
        ‚Ä¢ `americanfootball_nfl` - NFL
        ‚Ä¢ `basketball_nba` - NBA
        ‚Ä¢ `soccer_spain_la_liga` - La Liga
        ‚Ä¢ `soccer_italy_serie_a` - Serie A
        """)
        
        # Avertissement
        st.warning("‚ö†Ô∏è **Avertissement :** Les pronostics sont fournis √† titre informatif. Pariez de mani√®re responsable !")

if __name__ == "__main__":
    main()
